package com.student.StudentCRUD.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.student.StudentCRUD.model.Student;
import com.student.StudentCRUD.service.StudentService;
import java.util.*;

@RestController
public class StudentController {

	@Autowired 
	
	StudentService Getservice;
	
	@GetMapping("/student")
	public List<Student> GetStudents() {
		return Getservice.getAllStudents();
	}
	
	@GetMapping("/student/select/{id}")
	public ResponseEntity<Student> GetStudentById(@PathVariable int id){
		Optional<Student> student = Getservice.getStudentById(id);
		return student.map(ResponseEntity::ok).orElseGet(()-> ResponseEntity.notFound().build());
	}
	
	@PostMapping("/student/create")
	public ResponseEntity<Student> createStudent(@RequestBody Student student){
		Student students = Getservice.saveStudent(student);
		return ResponseEntity.status(HttpStatus.CREATED).body(students);
	}
	
	@PutMapping("/student/update/{id}")
	public ResponseEntity<Student> updateStudent(@PathVariable int id,@RequestBody Student student){
		if(!Getservice.getStudentById(id).isPresent()) {
		   return ResponseEntity.notFound().build();
		}
		student.setStudent_id(id);
		Student update = Getservice.saveStudent(student);
		return ResponseEntity.ok(update);
	}
	
	@DeleteMapping("/student/delete/{id}")
	public ResponseEntity<Student> deleteStudent(@PathVariable int id){
		if(!Getservice.getStudentById(id).isPresent()) {
			return ResponseEntity.notFound().build();
		}
		Getservice.deleteStudent(id);
		return ResponseEntity.noContent().build();
	}
}
